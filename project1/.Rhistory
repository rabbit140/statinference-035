hist(rnorm(100))
rnorm(100)
hist(rnorm(10000))
hist(rnorm(10000000))
mu <- 80
s <- 10
?pnorm
pnorm(mean = mu, sd = s)
pnorm(q = 75,mean = mu, sd = s)
pnorm(q = 70, mean = mu, sd = s)
mu = 1100
s = 75
qnorm(0.95)
qnorm(0.975)
pnorm(0.95)
pnorm(1.2)
qnorm(95)
?qnorm
qnorm(0.95)
qnorm(0.95, mean = mu, sd = s)
nsim = 100
rm(nsim)
n = 100
se = s/sqrt(n)
se
qnorm(.95)
mu+qnorm(0.95)*se
heads4 <- choose(5,4)*0.5^4*(1-0.5)^(5-4)
heads4
heads5 <- choose(5,5)*0.5^5*(1-0.5)^(5-5)
heads4+heads4
heads4 <- choose(5,4)*(0.5^4)*(1-0.5)^(5-4)
heads4
heads5 <- choose(5,5)
heads5
heads5 <- choose(5,5)*(0.5^5)*(1-0.5)^(0)
heads5
heads4+heads5
mu = 15
s = 10
pnorm(16, mean = mu, sd = s)
mu
s
Zu <- (16 - mu)/(s/sqrt(100))
Zl <- (14 - mu)/(s/sqrt(100))
pnorm(Zu)
pnorm(Zu) - pnorm(Zl)
pnorm(Zu)
pnorm(Zl)
pnorm(Zl, lower.tail = F)
?unif
??uniform
?runif
mu = 0.5
var = 1/12
var
t = 3
?poisson
?poisson.test
mu = 5
poisson.test(10, T = 3)
mu
e^(-mu)
exp(-mu)
exp(-mu)*(mu^10)/factorial(10)
ppois(10, lambda = 3*5)
install.packages(c("cowplot", "dygraphs", "geosphere", "ggmap", "ggplot2", "Hmisc", "plotly", "plotrix", "raster", "RcppArmadillo"))
cumsum(1:1000)
cumsum(1:1000)/c(1:1000)
plot(cumsum(1:1000)/c(1:1000))
x <- rnorm(100)
x <- rnorm(1000)
cumsum(x)
cumsum(rnorm(10000))
cumsum(rnorm(10000))/(1:10000)
plot(cumsum(rnorm(10000))/(1:10000))
plot(cumsum(rnorm(10000))/(1:10000), type = "l")
abline(y = 0,lwd = 5)
abline(0,lwd = 5)
?abline
abline(h=0)
abline(h=0, lty = 4)
abline(h=0, lwd = 4)
n = 10
rnorm(10)
cumsum(rnorm(10))
cumsum(rnorm(10))/(1:10)
plot(cumsum(rnorm(10))/(1:10))
plot(cumsum(rnorm(100))/(1:100))
cumsum(rnorm(100))/(1:100)
set.seed(1)
cumsum(rnorm(100))/(1:100)
cumsum(rnorm(10))/(1:10)
set.seed(1)
set.seed(1)
cumsum(rnorm(10))/(1:10)
cumsum(rnorm(10))/(1:10)
cumsum(rnorm(10))/(1:10)
set.seed(1)
cumsum(rnorm(10))/(1:10)
set.seed(1)
rnorm(10)
set.seed(1)
(rnorm(10)[1]+rnorm(10)[2])/2
set.seed(1)
(rnorm(10)[1]+rnorm(10)[2])/2
(rnorm(10)[1]+rnorm(10)[2])/
)
set.seed(1)
-0.62+0.18
-0.44/2
-0.62+0.18-0.83
-1.27/3
cumsum(rnorm(n))/(1:n)
x <- cumsum(rnorm(n))/(1:n)
n = 100000
x <- cumsum(rnorm(n))/(1:n)
plot(x)
n = 1000000
x <- cumsum(rnorm(n))/(1:n)
plot(x, type = "l")
dir()
load("installed_packages.rda")
for (count in 1:length(installedpackages)) install.packages(installedpackages[count])
library("akima", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
installed.packages()
?qt
?dcast
library(datasets)
?dcast
library(reshape2)
?dcasgt
?dcast
qnorm(0.95)
pnorm(0.99)
pnorm(0.975)
pnorm(0.99)
pnorm(0.9999)
pnorm(0.9999999)
pnorm(0.9999999999999)
pnorm(0.9999999999999999999999999999999999999999999)
pnorm(1)
?pnorm
pnorm(0.5)
pnorm(-1)
pnorm(-10)
pnorm(10)
pnorm(1)
pnorm(2)
pnorm(1.965)
pnorm(1.69)
pnorm(1.685)
qnorm(2.5)
qnorm(.99)
qnorm(.95)
pnorm(.95)
?tnorm
qt(.95)
qt(.95, df = 15)
qt(.975,15)
?qt
plot(dt(1))
plot(dt(1, df = 1))
plot(dt(100, df = 1))
tnrom(100)
tnorm(100)
t.test
args(t.test)
?unclass
pt(2.5)
pt(2.5,15)
pt(2.5,15.lower.tail = FALSE)
pt(2.5,15,lower.tail = FALSE)
pt(2.5,15,lower.tail = T)
pt(2.5,15,lower.tail = F)
1-pt(2.5,15,lower.tail = T)
pt(2,15,lower.tail = F)
pnorm(.95)
qnorm(1.645)
pnorm(1.645)
pnorm(1.96)
pnorm(1.96, lower.tail = F)
pnorm(1.96, lower.tail = F)
qnorm(.01)
qnorm(.01, lower.tail = F)
qnorm(1.69)
plot(rexp(xnorm(100)))
rexp(100)
plot(rexp(100))
plot(rexp(10000))
?rexp
plot(dexp(100))
plot(rexp(1000))
hist(rexp(100))
hist(rexp(10000))
hist(rnorm(1000))
hist(rpois(1000))
hist(rpois(1000,0))
hist(rpois(1000,5))
hist(rpois(1000,6))
hist(rpois(1000,1))
hist(rpois(1000,0.5))
hist(rpois(1000,010))
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
source('~/Documents/R/functions_code/twitter_scraper.R')
twitter_scraper()
install.packages("twitteR")
twitter_scraper()
install.packages("httr")
install.packages("libcurl")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("twitteR")
source('~/Documents/R/functions_code/twitter_scraper.R')
twitter_scraper()
twitter_scraper()
twitter_scraper()
install.packages("spatstat")
shit
x <- 5
n <- 9
mu <- 1100
sd <- 30
?t.test
qt(.95)
pt(.95)
pt(.95,8)
pt(.975,8)
qt(.95,8)
1100+(qt(.95,8)*sd/sqrt(n))
1100-(qt(.95,8)*sd/sqrt(n))
sd
pt(95)
pt(1)
pt(1,5)
qt(1.2,5)
qt(0.95,8)
1100+qt(0.95,8)*30/sqrt(9)
1100+qt(0.975,8)*30/sqrt(9)
1100-qt(0.975,8)*30/sqrt(9)
n <- 1000
lambda = 0.2
for i in 1:40{
for (i in 1:40){
}
mu <- numeric(40)
mu
mu[1] <- 3.7566
mu
mu <- numeric(40)
for (i in 1:40){
mu[i] <- mean(rexp(n = n, lambda = lambda))
}
?rexp
for (i in 1:40){
mu[i] <- mean(rexp(n = n, lambda))
}
mu
hist(mu)
mean(mu)
1/0.2
var(mu)
(1/lambda)^2
1/lambda
hist(mu)
?abline
abline(v = 1/lambda)
abline(v = 1/lambda, lwd = 2)
abline(v = 1/lambda, lwd = 2, col = "Red")
abline(v = 1/lambda, lwd = 4, col = "red")
xlab = "Mu"
hist(mu, xlab = mean)
hist(mu, xlab = "mean")
abline(v = 1/lambda, lwd = 4, col = "red")
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
for(i in 1:1000){
mu[i] <- mean(rexp(n = 40, lambda))
}
hist(mu)
abline(v = mu, col = "red", lwd = 3)
abline(v = 1/lambda, col = "red", lwd = 3)
hist(mu)
abline(v = 1/lambda, col = "red", lwd = 3)
sudo apt-get install powertop
mean(rexp(40))
for(i in 1:1000){
mu[i] <- mean(rexp(40,0.2))
}
hist(mu)
mean(mu)
1/lambda
rexp(40, lambda)
mean(rexp(40, lambda))
mean(rexp(400, lambda))
mean(rexp(400000, lambda))
library(datasets)
data("ToothGrowth")
str(ToothGrowth)
View(ToothGrowth)
?inspect
library(help = "datasets")
attach(ToothGrowth)
plot(dose, len)
library(ggplot2)
detach(ToothGrowth)
g <- ggplot(data = ToothGrowth, aes(x = len, y = dose))
g + geom_boxplot()
g <- ggplot(data = ToothGrowth, aes(x = dose, y = len))
g + geom_boxplot()
g <- ggplot(data = ToothGrowth, aes(x = as.factor(dose), y = len))
g + geom_boxplot()
g + geom_boxplot(colour = len)
g + geom_boxplot(colour = dose)
g + geom_boxplot(aes(color = len))
g + geom_boxplot(aes(color = dose))
g + geom_boxplot(aes(fill = len))
g + geom_boxplot(aes(fill = dose))
g + geom_boxplot(aes(fill = supp))
g + geom_boxplot(aes(fill = supp))
plot(ToothGrowth$supp, ToothGrowth$len)
h <- ggplot(data = ToothGrowth, aes(x = supp, y = len))
h + geom_boxplot()
h + geom_boxplot(aes(fill = supp))
h + geom_boxplot(aes(fill = dose))
h + geom_boxplot(aes(fill = len))
h + geom_boxplot(aes(fill = lenh))
h + geom_boxplot()
mu_new <- 3
var_new <- 0.6
mu_old <- 5
var_old <- 0.68
?t.test
mu_new - mu_old + qt(.975, 19)/sqrt(20)
mu_new - mu_old - qt(.975, 19)/sqrt(20)
mu_new - mu_old - qt(.975, 9)/sqrt(20)
Sp <- ((10-1)*var_new + (10-1)*var_old)/(10+10-2)
Sp
mu_new - mu_old + qt(.975, 20-2)*Sp*sqrt((1/10+1/10))
mu_new - mu_old + qt(.975, 18)*Sp*sqrt((1/10+1/10))
mu_new - mu_old + c(-1,1) qt(.975, 18)*Sp*sqrt((1/10+1/10))
mu_new - mu_old + c(-1,1)*qt(.975, 18)*Sp*sqrt((1/10+1/10))
mu_new - mu_old + c(-1,1)*qt(.975, 18)*sqrt(Sp*((1/10+1/10)))
?t.test
1/0.04
library(ggplot2)
g <- ggplot(aes(x = mu))
class(x)
class(mu)
set.seed(0)
n <- 40
lambda <- 0.2
mu <- numeric(1000)
for (i in 1:1000){
mu[i] <- mean(rexp(n,lambda))
}
#Mean of the distribution of averages of 40 exponentials from 1000 simulations:
mean(mu)
class(mu)
g <- ggplot(aes(x = mu))
typeof(mu)
x
mu
g <- ggplot(data = x, aes(x = mu))
g <- ggplot(data = mu, aes(x = mu))
mu_df <- data.frame(mu = mu)
mu_df
g <- ggplot(data = mu_df, aes(x = mu))
g + geom_histogram()
g + geom_histogram(bins = 100)
hist(mu)
g + geom_histogram(bins = 10)
hist(mu)
g + geom_histogram(bins = 12)
g + geom_histogram(bins = 12, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 12, aes(y = density)) + geom_density()
g + geom_histogram(bins = 12, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 50, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 20, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 2000, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 200, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 100, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 50, aes(y = ..density..)) + geom_density()
g + geom_histogram(bins = 30, aes(y = ..density..)) + geom_density()
g <- ggplot(data = mu_df, aes(x = mu))
g + geom_histogram(bins = 30, aes(y = ..density..)) + geom_density()
?labs
library(ggplot2)
set.seed(0)
n <- 40
lambda <- 0.2
mu <- numeric(1000)
for (i in 1:1000){
mu[i] <- mean(rexp(n,lambda))
}
mean(mu)
mu_df <- data.frame(mu = mu)
g <- ggplot(data = mu_df, aes(x = mu))
g + geom_histogram(bins = 30, aes(y = ..density..)) + geom_density() + xlab("Sample mean") +
ylab("Frequency") + ggtitle("Histogram of distribution of sample means of exponential distribution") +
theme(plot.title = element_text(size = rel(1.2)))
var(mu)
1/(lambda^2)
sd(mu)
library(ggplot2)
set.seed(0)
n <- 4000
lambda <- 0.2
mu <- numeric(10000)
for (i in 1:10000){
mu[i] <- mean(rexp(n,lambda))
}
hist(mu)
mu_df <- data.frame(mu = mu)
g <- ggplot(data = mu_df, aes(x = mu))
g + geom_histogram(bins = 30, aes(y = ..density..)) + geom_density() + xlab("Sample mean") +
ylab("Frequency") + ggtitle("Histogram of distribution of sample means of exponential distribution") +
theme(plot.title = element_text(size = rel(1.2)))
var(mu)
sd(mu)
library(ggplot2)
set.seed(0)
n <- 40
lambda <- 0.2
mu <- numeric(1000)
for (i in 1:1000){
mu[i] <- mean(rexp(n,lambda))
}
mu_df <- data.frame(mu = mu)
g <- ggplot(data = mu_df, aes(x = mu))
g + geom_histogram(bins = 30, aes(y = ..density..)) + geom_density() + xlab("Sample mean") +
ylab("Frequency") + ggtitle("Histogram of distribution of sample means of exponential distribution") +
theme(plot.title = element_text(size = rel(1.2)))
sd(mu)
var(mu)
var(mu)
25/var(mu)
var(mu)/n
1/lambda
source('~/.active-rstudio-document', echo=TRUE)
?rexp
rexp(4000, rate = c(-1,1))
library(swirl)
install.packages("swirl")
library(Swirl)
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
1-3/36
library(markdown)
library(rmarkdown)
render("statinference-035.Rmd", "pdf_document")
dir()
setwd("~/Documents/R/Coursera/statinference-035")
render("statinference-035.Rmd", "pdf_document")
dir()
setwd("~/Documents/R/Coursera/statinference-035/project1")
render("statinference-035.Rmd", "pdf_document")
render("statinference-035.Rmd", "pdf_document")
render("statinference-035.Rmd", "pdf_document")
?skew
??skew
install.packages("e1071")
library(e1071)
library(e1071)
mu
skewness(mu)
set.seed(0)
n <- 40
lambda <- 0.2
mu <- numeric(1000)
for (i in 1:1000){
mu[i] <- mean(rexp(n,lambda))
}
#Mean of the distribution of averages of 40 exponentials from 1000 simulations:
mean(mu)
skewness(mu)
set.seed(0)
n <- 40
lambda <- 0.2
mu <- numeric(1000)
for (i in 1:1000){
mu[i] <- mean(rexp(n,lambda))
}
#Mean of the distribution of averages of 40 exponentials from 1000 simulations:
mean(mu)
skewness(mu)
plot(rexp(10000))
hist(rexp(100000))
hist(rexp(100000000))
hist(rexp(1000000))
hist(rexp(10000000))
hist(rexp(10000000), bins = 100)
hist(rexp(10000000), binwidth = 100)
warnings()
?hist
hist(rexp(10000000), breaks = 100)
hist(rexp(10000000), breaks = "Sturges")
ceiling(log2(length(rexp(10000000))) + 1)
hist(rexp(10000000))
hist(rexp(10000000), breaks = 200)
hist(rexp(10000000), breaks = 1000)
hist(rexp(10000000), breaks = 10000)
hist(rexp(10000000), breaks = 1000000)
hist(rexp(10000000), breaks = 1000000)
